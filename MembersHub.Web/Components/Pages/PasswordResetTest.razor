@page "/test-password-reset"
@using MembersHub.Core.Interfaces
@using Microsoft.AspNetCore.Authorization
@inject IPasswordResetService PasswordResetService
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<PageTitle>Δοκιμή Επαναφοράς Κωδικού</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Color="Color.Primary">
                    <MudIcon Icon="Icons.Material.Filled.TestTube" Class="mr-3" />
                    Δοκιμή Επαναφοράς Κωδικού
                </MudText>
            </CardHeaderContent>
        </MudCardHeader>
        
        <MudCardContent>
            <MudText Class="mb-4" Color="Color.Secondary">
                Αυτή η σελίδα είναι για δοκιμή της λειτουργίας επαναφοράς κωδικού. 
                Βεβαιωθείτε ότι έχετε διαμορφώσει τις ρυθμίσεις email πρώτα.
            </MudText>

            <MudForm @ref="form" @bind-IsValid="@isValid">
                <MudTextField @bind-Value="email" 
                            Label="Email για Δοκιμή" 
                            Variant="Variant.Outlined" 
                            Required="true"
                            RequiredError="Το email είναι υποχρεωτικό"
                            Validation="@(new EmailAddressAttribute() { ErrorMessage = "Μη έγκυρη διεύθυνση email" })"
                            FullWidth="true"
                            Class="mb-4" />
                
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          Size="Size.Large"
                          FullWidth="true"
                          StartIcon="Icons.Material.Filled.Send"
                          OnClick="RequestPasswordReset"
                          Disabled="@(!isValid || isLoading)">
                    @if (isLoading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                        <MudText Class="ms-2">Αποστολή...</MudText>
                    }
                    else
                    {
                        <MudText>Αίτημα Επαναφοράς</MudText>
                    }
                </MudButton>
            </MudForm>

            @if (!string.IsNullOrEmpty(lastResult))
            {
                <MudAlert Severity="@(lastSuccess ? Severity.Success : Severity.Error)" Class="mt-4">
                    @lastResult
                </MudAlert>
            }
        </MudCardContent>
    </MudCard>

    <!-- Debug Info Card -->
    @if (showDebugInfo)
    {
        <MudCard Class="mt-4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="Icons.Material.Filled.BugReport" Class="mr-2" />
                        Debug Information
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            
            <MudCardContent>
                <MudText><strong>IP Address:</strong> @ipAddress</MudText>
                <MudText><strong>User Agent:</strong> @userAgent</MudText>
                <MudText><strong>Last Attempt:</strong> @lastAttemptTime</MudText>
                @if (attempts.Any())
                {
                    <MudText Class="mt-2"><strong>Recent Attempts:</strong></MudText>
                    @foreach (var attempt in attempts.TakeLast(5))
                    {
                        <MudChip T="string" Size="Size.Small" Color="@(attempt.Success ? Color.Success : Color.Error)">
                            @attempt.Time.ToString("HH:mm:ss") - @(attempt.Success ? "✓" : "✗") @attempt.Message
                        </MudChip>
                    }
                }
            </MudCardContent>
        </MudCard>
    }

    <MudFab Color="Color.Secondary"
           StartIcon="@(showDebugInfo ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility)"
           Size="Size.Small"
           OnClick="ToggleDebugInfo"
           Style="position: fixed; bottom: 20px; right: 20px;" />
</MudContainer>

@code {
    private MudForm? form;
    private bool isValid;
    private bool isLoading;
    private string email = "";
    private string lastResult = "";
    private bool lastSuccess;
    private string ipAddress = "";
    private string userAgent = "";
    private DateTime lastAttemptTime;
    private bool showDebugInfo = false;
    
    private readonly List<(DateTime Time, bool Success, string Message)> attempts = new();

    protected override async Task OnInitializedAsync()
    {
        // Get client IP and User Agent for testing
        ipAddress = await JSRuntime.InvokeAsync<string>("eval", "window.location.hostname") ?? "127.0.0.1";
        userAgent = await JSRuntime.InvokeAsync<string>("eval", "navigator.userAgent") ?? "TestBrowser";
    }

    private async Task RequestPasswordReset()
    {
        if (!isValid) return;
        
        isLoading = true;
        lastAttemptTime = DateTime.Now;
        
        try
        {
            var result = await PasswordResetService.RequestPasswordResetAsync(
                email, 
                ipAddress, 
                userAgent
            );
            
            lastSuccess = result.Success;
            lastResult = result.Message;
            
            attempts.Add((lastAttemptTime, result.Success, result.Message));
            
            if (result.Success)
            {
                Snackbar.Add($"Email επαναφοράς στάλθηκε στο {email}", Severity.Success);
            }
            else
            {
                Snackbar.Add(result.Message, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            lastSuccess = false;
            lastResult = $"Σφάλμα: {ex.Message}";
            attempts.Add((lastAttemptTime, false, ex.Message));
            Snackbar.Add("Σφάλμα κατά την επεξεργασία του αιτήματος", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleDebugInfo()
    {
        showDebugInfo = !showDebugInfo;
    }
}