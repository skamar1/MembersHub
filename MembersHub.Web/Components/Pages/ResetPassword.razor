@page "/reset-password"
@using System.ComponentModel.DataAnnotations
@using MembersHub.Core.Interfaces
@inject IPasswordResetService PasswordResetService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Επαναφορά Κωδικού - MembersHub</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
    <MudPaper Elevation="4" Class="pa-8">
        <MudStack Spacing="4">
            <div class="text-center">
                <MudIcon Icon="Icons.Material.Filled.Lock" Size="Size.Large" Color="Color.Primary" />
                <MudText Typo="Typo.h4" Class="mt-2">Επαναφορά Κωδικού</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Εισάγετε τον νέο σας κωδικό πρόσβασης
                </MudText>
            </div>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="mb-4">
                    @errorMessage
                </MudAlert>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <MudAlert Severity="Severity.Success" Variant="Variant.Filled" Class="mb-4">
                    @successMessage
                </MudAlert>
            }

            @if (!isTokenValid)
            {
                <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Class="mb-4">
                    <MudText Typo="Typo.body1"><strong>Μη έγκυρο ή ληγμένο token</strong></MudText>
                    <MudText Typo="Typo.body2">Το link επαναφοράς που χρησιμοποιήσατε δεν είναι έγκυρο ή έχει λήξει.</MudText>
                    <MudButton StartIcon="Icons.Material.Filled.Email" 
                               Color="Color.Primary" 
                               Variant="Variant.Text" 
                               Class="mt-2"
                               OnClick="NavigateToRequestReset">
                        Ζητήστε νέο link επαναφοράς
                    </MudButton>
                </MudAlert>
            }
            else if (!resetCompleted)
            {
                <EditForm Model="@resetModel" OnValidSubmit="@HandlePasswordReset">
                    <DataAnnotationsValidator />
                    
                    <MudStack Spacing="3">
                        <MudTextField @bind-Value="resetModel.NewPassword"
                                      Label="Νέος Κωδικός"
                                      InputType="@(showPassword ? InputType.Text : InputType.Password)"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@(showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                      OnAdornmentClick="@(() => showPassword = !showPassword)"
                                      For="@(() => resetModel.NewPassword)"
                                      Immediate="true"
                                      Required="true"
                                      RequiredError="Ο κωδικός είναι υποχρεωτικός"
                                      Counter="50"
                                      MaxLength="50" />

                        <MudTextField @bind-Value="resetModel.ConfirmPassword"
                                      Label="Επιβεβαίωση Νέου Κωδικού"
                                      InputType="@(showConfirmPassword ? InputType.Text : InputType.Password)"
                                      Adornment="Adornment.End"
                                      AdornmentIcon="@(showConfirmPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                                      OnAdornmentClick="@(() => showConfirmPassword = !showConfirmPassword)"
                                      For="@(() => resetModel.ConfirmPassword)"
                                      Immediate="true"
                                      Required="true"
                                      RequiredError="Η επιβεβαίωση κωδικού είναι υποχρεωτική" />

                        @if (!string.IsNullOrEmpty(resetModel.NewPassword))
                        {
                            <MudStack Spacing="1" Class="pa-2" Style="background-color: var(--mud-palette-background-grey);">
                                <MudText Typo="Typo.caption" Color="Color.Secondary">Ισχύς κωδικού:</MudText>
                                <MudStack Row="true" Spacing="1" AlignItems="AlignItems.Center">
                                    @for (int i = 0; i < passwordStrengthBars; i++)
                                    {
                                        <MudElement Style="@GetPasswordBarStyle(i)" />
                                    }
                                    <MudText Typo="Typo.caption" Class="ml-2">@passwordStrengthText</MudText>
                                </MudStack>
                            </MudStack>
                        }

                        <ValidationSummary />

                        <MudButton ButtonType="ButtonType.Submit"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Large"
                                   FullWidth="true"
                                   StartIcon="Icons.Material.Filled.Save"
                                   Disabled="@(isLoading || !IsFormValid())"
                                   Class="mt-4">
                            @if (isLoading)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                                <MudText Class="ms-2">Αποθήκευση...</MudText>
                            }
                            else
                            {
                                <MudText>Αποθήκευση Κωδικού</MudText>
                            }
                        </MudButton>
                    </MudStack>
                </EditForm>
            }
            else
            {
                <MudStack Spacing="4" AlignItems="AlignItems.Center">
                    <MudIcon Icon="Icons.Material.Filled.CheckCircle" Size="Size.Large" Color="Color.Success" />
                    <MudText Typo="Typo.h6" Align="Align.Center">Επιτυχής Επαναφορά!</MudText>
                    <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Secondary">
                        Ο κωδικός σας έχει επαναφερθεί επιτυχώς. Μπορείτε τώρα να συνδεθείτε με τον νέο σας κωδικό.
                    </MudText>
                    <MudButton Variant="Variant.Filled" 
                               Color="Color.Primary" 
                               StartIcon="Icons.Material.Filled.Login"
                               OnClick="NavigateToLogin">
                        Σύνδεση
                    </MudButton>
                </MudStack>
            }
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    [SupplyParameterFromQuery] public string? token { get; set; }

    private ResetPasswordModel resetModel = new();
    private bool isLoading = false;
    private bool showPassword = false;
    private bool showConfirmPassword = false;
    private bool isTokenValid = false;
    private bool resetCompleted = false;
    private string? errorMessage;
    private string? successMessage;
    private int passwordStrengthBars = 0;
    private string passwordStrengthText = "";

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(token))
        {
            errorMessage = "Δεν παρέχεται token επαναφοράς.";
            return;
        }

        // Validate token
        var result = await PasswordResetService.ValidateResetTokenAsync(token, GetClientIpAddress());
        if (result.Success)
        {
            isTokenValid = true;
        }
        else
        {
            errorMessage = result.Message;
        }
    }

    protected override void OnParametersSet()
    {
        // This method runs when parameters change
    }

    private async Task HandlePasswordReset()
    {
        if (!IsFormValid())
            return;

        isLoading = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            var result = await PasswordResetService.ResetPasswordAsync(token!, resetModel.NewPassword, GetClientIpAddress());
            
            if (result.Success)
            {
                successMessage = result.Message;
                resetCompleted = true;
                
                // Clear the form
                resetModel = new ResetPasswordModel();
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception)
        {
            errorMessage = "Παρουσιάστηκε σφάλμα. Παρακαλώ δοκιμάστε ξανά.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool IsFormValid()
    {
        // Calculate password strength whenever we check form validity
        if (!string.IsNullOrEmpty(resetModel.NewPassword))
        {
            CalculatePasswordStrength();
        }
        
        return !string.IsNullOrWhiteSpace(resetModel.NewPassword) &&
               !string.IsNullOrWhiteSpace(resetModel.ConfirmPassword) &&
               resetModel.NewPassword == resetModel.ConfirmPassword &&
               resetModel.NewPassword.Length >= 6;
    }

    private void CalculatePasswordStrength()
    {
        var password = resetModel.NewPassword ?? "";
        var score = 0;

        // Length requirements (more strict)
        if (password.Length >= 8) score++;
        if (password.Length >= 12) score++;
        
        // Character type requirements
        if (password.Any(char.IsDigit)) score++;
        if (password.Any(char.IsLower)) score++;
        if (password.Any(char.IsUpper)) score++;
        if (password.Any(c => !char.IsLetterOrDigit(c))) score++;
        
        // Advanced strength checks
        if (password.Length >= 16) score++;
        if (HasMultipleSpecialChars(password)) score++;
        if (HasNoCommonPatterns(password)) score++;
        
        // Penalties for weak patterns
        if (HasRepeatingChars(password)) score = Math.Max(0, score - 2);
        if (IsCommonPassword(password)) score = Math.Max(0, score - 3);

        passwordStrengthBars = Math.Min(Math.Max(score, 1), 4);
        passwordStrengthText = score switch
        {
            <= 2 => "Πολύ αδύναμος",
            3 => "Αδύναμος", 
            4 => "Μέτριος",
            5 => "Καλός",
            _ => "Πολύ καλός"
        };
    }
    
    private static bool HasMultipleSpecialChars(string password)
    {
        return password.Count(c => !char.IsLetterOrDigit(c)) >= 2;
    }
    
    private static bool HasNoCommonPatterns(string password)
    {
        var common = new[] { "123", "abc", "qwe", "asd", "zxc", "000", "111" };
        return !common.Any(pattern => password.ToLower().Contains(pattern));
    }
    
    private static bool HasRepeatingChars(string password)
    {
        for (int i = 0; i < password.Length - 2; i++)
        {
            if (password[i] == password[i + 1] && password[i + 1] == password[i + 2])
                return true;
        }
        return false;
    }
    
    private static bool IsCommonPassword(string password)
    {
        var commonPasswords = new[] { "password", "123456", "qwerty", "admin", "test", "user", "guest" };
        return commonPasswords.Any(common => password.ToLower().Contains(common));
    }

    private string GetPasswordBarStyle(int index)
    {
        var color = passwordStrengthBars switch
        {
            1 => "#f44336", // Red
            2 => "#ff9800", // Orange  
            3 => "#ffeb3b", // Yellow
            _ => "#4caf50"  // Green
        };
        
        var opacity = index < passwordStrengthBars ? "1" : "0.2";
        return $"height: 4px; width: 20%; background-color: {color}; opacity: {opacity}; border-radius: 2px;";
    }

    private string GetClientIpAddress()
    {
        // In a real application, you would get the actual client IP
        return "localhost";
    }

    private void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private void NavigateToRequestReset()
    {
        Navigation.NavigateTo("/test-password-reset");
    }

    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "Ο κωδικός είναι υποχρεωτικός")]
        [MinLength(6, ErrorMessage = "Ο κωδικός πρέπει να έχει τουλάχιστον 6 χαρακτήρες")]
        public string NewPassword { get; set; } = "";

        [Required(ErrorMessage = "Η επιβεβαίωση κωδικού είναι υποχρεωτική")]
        [Compare("NewPassword", ErrorMessage = "Οι κωδικοί δεν ταιριάζουν")]
        public string ConfirmPassword { get; set; } = "";
    }
}