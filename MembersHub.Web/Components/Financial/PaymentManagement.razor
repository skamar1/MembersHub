@page "/financial/payments"
@using MembersHub.Core.Entities
@using MembersHub.Core.Interfaces
@using MembersHub.Infrastructure.Data
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@inject MembersHubContext Context
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@inject ISubscriptionService SubscriptionService
@inject IPaymentService PaymentService
@inject IDialogService DialogService
@attribute [Authorize(Roles = "Admin,Owner,Treasurer")]

@code {
    [SupplyParameterFromQuery]
    public int? MemberId { get; set; }
}

<PageTitle>Payment Management</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <div class="d-flex justify-space-between align-center mb-6">
        <MudText Typo="Typo.h4">💳 Διαχείριση Πληρωμών</MudText>
        <MudButtonGroup Variant="Variant.Filled">
            <MudButton Color="Color.Primary" OnClick="OpenNewPaymentDialog">
                <MudIcon Icon="Icons.Material.Filled.Add" Class="mr-2" />
                Νέα Πληρωμή
            </MudButton>
            <MudButton Color="Color.Secondary" OnClick="ShowPendingSubscriptions">
                <MudIcon Icon="Icons.Material.Filled.Schedule" Class="mr-2" />
                Εκκρεμείς Συνδρομές
            </MudButton>
        </MudButtonGroup>
    </div>

    <!-- Quick Payment Section for Cashiers -->
    <AuthorizeView Roles="Treasurer" Context="treasurerContext">
        <Authorized>
            <MudCard Class="mb-6" Elevation="3" Style="background: linear-gradient(45deg, #e8f5e8, #f1f8e9);">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">⚡ Γρήγορη Εισπραξη</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid AlignItems="Center">
                    <MudItem xs="12" sm="4">
                        <MudAutocomplete T="Member"
                                         Value="selectedMember"
                                         ValueChanged="OnSelectedMemberChanged"
                                         SearchFunc="SearchMembers"
                                         ToStringFunc="@(m => m?.FullName ?? "")"
                                         Label="Επιλέξτε Μέλος"
                                         Variant="Variant.Outlined"
                                         AdornmentIcon="Icons.Material.Filled.Person" />
                    </MudItem>
                    <MudItem xs="12" sm="3">
                        <MudNumericField @bind-Value="quickPaymentAmount"
                                         Label="Ποσό (€)"
                                         Variant="Variant.Outlined"
                                         Format="N2"
                                         Min="0"
                                         AdornmentIcon="Icons.Material.Filled.Euro" />
                    </MudItem>
                    <MudItem xs="12" sm="3">
                        <MudSelect @bind-Value="quickPaymentMethod" Label="Τρόπος Πληρωμής" Variant="Variant.Outlined">
                            <MudSelectItem Value="PaymentMethod.Cash">Μετρητά</MudSelectItem>
                            <MudSelectItem Value="PaymentMethod.BankTransfer">Τραπεζική Μεταφορά</MudSelectItem>
                            <MudSelectItem Value="PaymentMethod.Card">Κάρτα</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="2">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Success"
                                   FullWidth="true"
                                   OnClick="ProcessQuickPayment"
                                   Disabled="selectedMember == null || quickPaymentAmount <= 0">
                            <MudIcon Icon="Icons.Material.Filled.Payment" />
                            Εισπραξη
                        </MudButton>
                    </MudItem>
                </MudGrid>

                @if (selectedMember != null && memberPendingSubscriptions.Any())
                {
                    <MudPaper Class="pa-3 mt-4" Elevation="1" Style="background-color: #fff3cd;">
                        <MudText Typo="Typo.subtitle2" Class="mb-2">Εκκρεμείς Συνδρομές:</MudText>
                        @foreach (var subscription in memberPendingSubscriptions)
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Warning" Class="mr-2 mb-1">
                                @GetMonthName(subscription.Month) @subscription.Year - €@subscription.Amount.ToString("N2")
                            </MudChip>
                        }
                        <MudText Typo="Typo.caption" Class="mt-2">
                            Συνολικό οφειλόμενο: <strong>€@memberPendingSubscriptions.Sum(s => s.Amount).ToString("N2")</strong>
                        </MudText>
                    </MudPaper>
                }
            </MudCardContent>
            </MudCard>
        </Authorized>
    </AuthorizeView>

    <!-- Summary Cards -->
    <MudGrid Class="mb-6">
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent Class="text-center">
                    <MudIcon Icon="Icons.Material.Filled.Payments" Color="Color.Primary" Size="Size.Large" />
                    <MudText Typo="Typo.h6" Class="mt-2">@payments.Count</MudText>
                    <MudText Typo="Typo.body2">Συνολικές Πληρωμές</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudCard Elevation="2">
                <MudCardContent Class="text-center">
                    <MudIcon Icon="Icons.Material.Filled.Euro" Color="Color.Success" Size="Size.Large" />
                    <MudText Typo="Typo.h6" Class="mt-2">€@payments.Sum(p => p.Amount).ToString("N2")</MudText>
                    <MudText Typo="Typo.body2">Συνολικό Ποσό</MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>

    <!-- Payments Table -->
    <MudCard Elevation="3">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Πληρωμές</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent Class="pa-0">
            <MudDataGrid T="Payment" Items="@payments" Filterable="true" SortMode="@SortMode.Multiple"
                         Loading="@loading" LoadingProgressColor="Color.Info" Hover="true"
                         RowsPerPage="10" Elevation="0">
                <Columns>
                    <PropertyColumn Property="x => x.Id" Title="ID" />
                    <TemplateColumn Title="Μέλος">
                        <CellTemplate Context="paymentContext">
                            @paymentContext.Item.Member.FirstName @paymentContext.Item.Member.LastName
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Amount" Title="Ποσό" Format="C2" />
                    <PropertyColumn Property="x => x.PaymentDate" Title="Ημερομηνία" Format="dd/MM/yyyy" />
                    <PropertyColumn Property="x => x.PaymentMethod" Title="Τρόπος Πληρωμής" />
                    <PropertyColumn Property="x => x.Status" Title="Κατάσταση" />
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="Payment" />
                </PagerContent>
            </MudDataGrid>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private bool loading = true;
    private List<Payment> payments = new();
    private List<Member> allMembers = new();
    private Member? selectedMember;
    private decimal quickPaymentAmount = 0;
    private PaymentMethod quickPaymentMethod = PaymentMethod.Cash;
    private List<Subscription> memberPendingSubscriptions = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadPayments();
        await LoadMembers();
    }

    private async Task LoadPayments()
    {
        loading = true;
        try
        {
            payments = await Context.Payments
                .Include(p => p.Member)
                .Include(p => p.Collector)
                .Include(p => p.Subscription)
                .OrderByDescending(p => p.PaymentDate)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Σφάλμα κατά τη φόρτωση πληρωμών: {ex.Message}", Severity.Error);
            payments = new List<Payment>();
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadMembers()
    {
        try
        {
            allMembers = await Context.Members
                .Where(m => m.Status == MemberStatus.Active)
                .OrderBy(m => m.LastName)
                .ThenBy(m => m.FirstName)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Σφάλμα κατά τη φόρτωση μελών: {ex.Message}", Severity.Error);
        }
    }

    private async Task<IEnumerable<Member>> SearchMembers(string value, CancellationToken token)
    {
        if (string.IsNullOrWhiteSpace(value))
            return allMembers.Take(10);

        return allMembers
            .Where(m => m.FullName.Contains(value, StringComparison.OrdinalIgnoreCase) ||
                       m.MemberNumber.Contains(value, StringComparison.OrdinalIgnoreCase))
            .Take(10);
    }

    private async Task LoadMemberPendingSubscriptions(int memberId)
    {
        try
        {
            var subscriptions = await SubscriptionService.GetMemberSubscriptionsAsync(memberId);
            memberPendingSubscriptions = subscriptions
                .Where(s => s.Status == SubscriptionStatus.Pending || s.Status == SubscriptionStatus.Overdue)
                .ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Σφάλμα κατά τη φόρτωση συνδρομών: {ex.Message}", Severity.Error);
            memberPendingSubscriptions = new List<Subscription>();
        }
    }

    private async Task ProcessQuickPayment()
    {
        if (selectedMember == null || quickPaymentAmount <= 0)
            return;

        try
        {
            var payment = new Payment
            {
                MemberId = selectedMember.Id,
                Amount = quickPaymentAmount,
                PaymentDate = DateTime.Now,
                PaymentMethod = quickPaymentMethod,
                Status = PaymentStatus.Confirmed,
                Notes = "Εισπραξη από ταμείο"
            };

            await PaymentService.CreatePaymentAsync(payment);

            Snackbar.Add($"Η πληρωμή €{quickPaymentAmount:N2} καταχωρήθηκε επιτυχώς για τον/την {selectedMember.FullName}!", Severity.Success);

            // Reset form
            selectedMember = null;
            quickPaymentAmount = 0;
            memberPendingSubscriptions.Clear();

            await LoadPayments();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Σφάλμα κατά την καταχώρηση πληρωμής: {ex.Message}", Severity.Error);
        }
    }

    private async Task ShowPendingSubscriptions()
    {
        try
        {
            var pendingSubscriptions = await SubscriptionService.GetPendingSubscriptionsAsync();
            var overdueSubscriptions = await SubscriptionService.GetOverdueSubscriptionsAsync();

            var allPending = pendingSubscriptions.Concat(overdueSubscriptions).ToList();

            if (!allPending.Any())
            {
                Snackbar.Add("Δεν υπάρχουν εκκρεμείς συνδρομές!", Severity.Info);
                return;
            }

            var parameters = new DialogParameters
            {
                { "PendingSubscriptions", allPending }
            };

            var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Large,
                FullWidth = true
            };

            await DialogService.ShowAsync<PendingSubscriptionsDialog>(
                "Εκκρεμείς Συνδρομές",
                parameters,
                options);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Σφάλμα κατά τη φόρτωση εκκρεμών συνδρομών: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnSelectedMemberChanged(Member? member)
    {
        selectedMember = member;

        if (selectedMember != null)
        {
            await LoadMemberPendingSubscriptions(selectedMember.Id);

            // Auto-fill amount with total pending
            if (memberPendingSubscriptions.Any())
            {
                quickPaymentAmount = memberPendingSubscriptions.Sum(s => s.Amount);
            }
        }
        else
        {
            memberPendingSubscriptions.Clear();
            quickPaymentAmount = 0;
        }

        StateHasChanged();
    }

    private async Task OpenNewPaymentDialog()
    {
        Snackbar.Add("Η λειτουργία θα υλοποιηθεί σύντομα", Severity.Info);
    }

    private string GetMonthName(int month)
    {
        var monthNames = new[] { "", "Ιανουάριος", "Φεβρουάριος", "Μάρτιος", "Απρίλιος", "Μάιος", "Ιούνιος",
                                "Ιούλιος", "Αύγουστος", "Σεπτέμβριος", "Οκτώβριος", "Νοέμβριος", "Δεκέμβριος" };
        return month >= 1 && month <= 12 ? monthNames[month] : month.ToString();
    }
}